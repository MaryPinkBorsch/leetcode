#include <iostream>

// Тема номер 4: . Понятие класса и его реализация в языке С++. Объекты.
// Данные и функции класса. Разграничение доступа. Конструкторы и деструкторы.

class A // класс А
{
    // public определяет видимость членов класса (переменных,
    // статических перменных, методов и т.п. "снаружи" класса)
    // кроме public (дефолтный доступ для структур) бывают private (дефолтный для классов),
    // protected (используется при наследовании)
public:
    // переменная класса A имеющая тип int и название a.
    // Это инстанс-переменная(самая обычная переменная класса) - каждый объект класса A имеет свою отдельную a
    int a;
    // ее и объявили и определили ОДНОВРЕМЕННО (так как она инстанс переменная)

    static int stat_a; // это объявление(!) статической переменной stat_a класса А. Статическая переменная - одна на весь класс
    //(если доступавться к статич. переменной с разных объектов типа А а1 и а2,
    // то это обращение к одной и той же переменной стат_а)

    // ОБЪЯВЛЕНИЕ стат. переменных ВСЕГДА внутри класса, как и у обычных переменных-членов класса
    //  при объявлении НЕЛЬЗЯ инициализ-ть СТАТИЧ. переменную

    // объявить и определить и инициализировать одновременно ВНУТРИ класса можно только КОНСТАНТНУЮ СТАТИЧЕСКУЮ переменную
    //  например:
    static const int lol = 55; // <--- оно объявлено, иниц-но и определено внутри клсса
    // константу (статич. и обычную) можно инициализировать ТОЛЬКО 1 РАЗ

    // ОПРЕДЕЛЕНИЕ стат. переменной должно быть ВНЕ КЛАССА в глобальной памяти
    //(память под стат. перем-ю создается при начале обработки программы (ее запуске)
    // и уничтожается при завершении работы программы)

    // ИНИЦИАЛИЗИРОВАТЬ стат. переменную = присвоить ей значение (инициализировать можно где угодно)
    // инициализировать статич. перем-ю можно и при ОПРЕДЕЛЕНИИ

    // ОБЪЯВЛЕНИЕ МЕТОДА (внутри класса)
    void print_a(); // объявление метода (функция, принадлежащая этому классу) print_a
    // этот метод работает с инстанс-переменнными и с статическими тоже (просто работает со всеми переменными класса)

    static void plus_stat_a(); // ОБЪЯВЛЕНИЕ статической функции (метода)


    private: // прячет то что дальше от любых функций кроме функций члена класса
    //(статич. функции видят ТОЛЬКО статич. переменные из private,
    // а обычные функции видят ВСЕ переменные из private)

    int aa;

    static int stat_aa; // ее надо определить СНАРУЖИ
};

// ОПРЕДЕЛЕНИЕ ранее объявленного метода print_a
void A::print_a()
{
    std::cout << " a = " << a << std::endl; // метода класса имеют доступ к ВСЕМ переменным внутри класса,

    std::cout << " stat_a = " << stat_a << std::endl; //  к статич. переменным тоже есть доступ
    // theA.a писать не надо

    ++stat_a;
}

// ОПРЕДЕЛЕНИЕ статичексого метода (static писать только при объявлении!)
void A::plus_stat_a()
{
    // статические методы имеют доступ ТОЛЬКО к статическим членам класса
    ++stat_a;

    // a++; <--- выдаст ОШИБКУ т.к. а - не статич. переменная
}

// это определение(!) статической переменной stat_a класса А.
// Она определеная в глобальном пространстве имен, и память под нее будет выделена в текущем модуле
int A::stat_a = 33; //(static писать только при объявлении!)

int main(int argc, char *argv[])
{
    A theA;
    A anotherA;

    theA.a = 1;
    anotherA.a = 2;
    if (theA.a != anotherA.a)
        std::cout << "разные!!" << std::endl;

    if (theA.stat_a == 0)
        std::cout << "stat_a == 0" << std::endl;

    std::cout << "Адрес theA.stat_a " << &(theA.stat_a) << std::endl;
    std::cout << "Адрес anotherA.stat_a " << &(anotherA.stat_a) << std::endl;
    std::cout << "Адрес A::stat_a " << &(A::stat_a) << std::endl; // такое обращение только для СТАТИЧЕСКИХ переменных

    if (theA.stat_a == anotherA.stat_a && anotherA.stat_a == A::stat_a && theA.stat_a == A::stat_a)
        std::cout << "внезапно это все одно и то же" << std::endl;

    theA.print_a();
    A::plus_stat_a(); // статические методы можно вызвать через имя класса "A::"  (стат. переменные ТОЖЕ)
    anotherA.print_a();

    // theA.aa =2222; <--- выдаст ОШИБКУ т.к.  в мейне НЕ ВИДНО  private часть класса

    // НО это сработает

    return 0;
}

// ОТЛИЧИЕ класса от структуры: по умолчанию весь класс - private, а вся структура по умолчанию - public 
// видимость можно изменить и в структуре и в классе (нгаписать private: \ public:)
// статические переменнеы и методы работают ОДИНАКОВО в структуре и классе